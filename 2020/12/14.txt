Monday 14 Dec 2020
==================

Yesterday I tried recording a journal entry using my voice. The idea was sound
but I ended up talking for over fifty minutes!

I am rather disappointed with the available offline speech to text
transcription software -- I thought this was a solved problem.

There is the Google Speech API, but this isn't free and the `gcloud ml speech`
client only seems to work with tiny files. There are also plenty of online
services that want to charge $5 an hour for audio transcription.

The transcription software I ended up using is Picovoice. It's free for
personal use. They have multiple engines, each with a different purpose and all
named after animals. I am using the "leopard" engine.

https://github.com/Picovoice/leopard

Leopard does a pretty good job of taking a large audio file and converting the
whole thing to text. It's also very quick and accurate enough to be useful.

It requires that the audio be a single mono WAV track, sampled at 16,000 Hz.
This is easy enough to do with Audacity and could be easily automated with a script.

Leopard's translation is far from perfect however, often misunderstanding what
I am saying.  It also does not understand punctuation, pauses or capitalization
- it just outputs a stream of uppercase words.

This means that fifty minutes of rambling audio can take another fifty minutes
of editing to get it into a useable state.

Future recordings are going to have to change. One thing I am trying today is
to use dictation operators.

For example, when I end a sentence I say "stop" (just like a telegram!). I can
then easily replace "stop" with a period and a new line.

I will also need to be more thoughtful about what I am saying, and to enunciate
my words clearly to avoid transcription errors. I can also have longer pauses
between sentences (because time doesn't matter) so I have plenty of time to
think.

todo
----

- [x] Book haircut -> tomorrow @ 15:30
- [>] Purchase groceries for lunch
- [>] Purchase chocolates the Chris and Anna
- [x] Book time with Pete for a virtual coffee -> tomorrow @ 1400
- [x] Encourage family to go out for fish and chips by the blue lake tonight
- [ ] Finish editing yesterdays journal entry
- [ ] Send message to Anne thanking her for her postcard and wishing her well
- [x] Visit the climbing wall around 5pm for a training session
- [?] (Hopefully!) pick up repaired bike wheel from shop.
- [ ] Configure parents email use the new Zoho Server

work
----

Today is a learning and development day. The focus of the learning will
be be programming language haskell.

1. set up a skull compiler on computer
2. complete a hello world program in haskell
3. build a more complex application such as a web server or command line tool

I wrote my notes in wiki/haskell.md

morning tea
-----------

I (finally) convinced mum to walk down to the local cafe, "Gr√∏unded". We walked
via Wylie street and I shouted us hot drinks. I had a good time and I think mum
enjoyed it. It would be nice to do this a few times each week -- surely just
going for a short walk outdoors would be good for mum's mental and physical
health -- I know it does wonders for my own.

sums
----

Summing patterns are interesting:

  sum [1..10]     -- 55
  sum [1..100]    -- 5050
  sum [1..1000]   -- 500500
  sum [1..10000]  -- 50005000
  sum [1..100000] -- 5000050000

Sums of 1..10x can be done by dividing 10x by 2 and concatenating it.

Example: 1..1000

  1000 / 2       -- = 500
  "500" ++ "500" -- = "500500"

...

  sum [1..20]     -- 210
  sum [1..200]    -- 20100
  sum [1..2000]   -- 2001000
  sum [1..20000]  -- 200010000
  sum [1..200000] -- 20000100000

Example: 1..2000

  2000 / 2        -- = 1000
  1000 / 5        -- = 200
  "200" ++ "1000" -- = "2001000"

...

  sum [1..30]     -- 465
  sum [1..300]    -- 45150
  sum [1..3000]   -- 4501500
  sum [1..30000]  -- 450015000
  sum [1..300000] -- 45000150000

  sum [1..n] = (45 * n / 3) + (n / 2)
